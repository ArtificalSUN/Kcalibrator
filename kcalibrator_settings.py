#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 5.4
#  in conjunction with Tcl version 8.6
#    Jan 04, 2021 05:36:01 PM +03  platform: Windows NT

import re, configparser

class SettingClass():
    """
    Class to handle parameters for pattern generation and g-code output
    """
    def __init__(self):
        self.speed_slow = 20.0 # slow speed for calibration pattern
        self.speed_fast = 100.0 # fast speed for calibrtion pattern
        self.k_start = 0.0 # \
        self.k_end = 0.2   # | start, stop and step values for K-factor calibration
        self.k_step = 0.01 # /
        self.layers_per_k = 5 # number of layers printed with any specific K-factor
        self.z_offset=0.0 # Z-offset
        self.size = (140.0, 70.0) # (X, Y) size of the pattern
        self.retract = (4.0, 30.0) # (length, speed) for retractions
        self.bed_size = (235.0, 235.0, 250.0) # (X, Y) size of the bed
        self.temperature = (210, 60) # (hotend, bed) temperatures
        self.path_spd_fractions = (0.2, 0.6, 0.2) #fractions for pattern parts printed with slow and fast speeds
        self.retract_at_layer_change = True # retract at layer change
        self.double_perimeter = True # print test with two perimeters instead of one
        self.use_ABL = False # adds autoleveling to start g-code
        self.ABL_type = 'G29' # gcode to start ABL
        self.ABL_type_list = ['G29','M83','G32', 'BED_MESH_CALIBRATE',]
        self.firmware = 'Marlin/Lerdge' # firmware type
        self.firmware_list = ['Marlin/Lerdge','Klipper','RepRapFirmware',]
        self.kinematics = 'Cartesian' # kinematics type
        self.kinematics_list = ['Cartesian','Delta',]
        # self.build_vol = (235, 235, 250) # machine build volume

        self.def_fil_dia = 1.75 # filament diameter in mm
        self.def_line_width = 0.4 # line width
        self.def_layer = 0.2 # layer height
        self.def_speed_print = 40.0 # default printing speed (first layer, etc.)
        self.def_speed_travel = 160.0 # defauld traver speed
        self.def_cooling = 50 # part cooling fan speed (0-100)

    def updatesettings(self, root):
        """
        Method for updating settings from GUI
        """
        s = root.ent_SlowSpeed.get()
        self.speed_slow = float(s)
        s = root.ent_FastSpeed.get()
        self.speed_fast = float(s) if s else 0.0
        s = root.ent_StartK.get()
        self.k_start = float(s) if s else 0.0
        s = root.ent_StopK.get()
        self.k_end = float(s) if s else 0.0
        s = root.ent_StepK.get()
        self.k_step = float(s) if s else 0.0
        s = root.ent_LayersPerK.get()
        self.layers_per_k = int(s) if s else 0
        s = root.ent_Zoffset.get()
        self.z_offset = float(s) if s else 0.0
        s1 = root.ent_PatternXsize.get(); s2 = root.ent_PatternYsize.get()
        self.size = (float(s1) if s1 else 0.0, float(s2) if s2 else 0.0)
        s1 = root.ent_RetractDist.get(); s2 = root.ent_RetractSpeed.get()
        self.retract = (float(s1) if s1 else 0.0, float(s2) if s2 else 0.0)
        s1 = root.ent_BuildVolX.get(); s2 = root.ent_BuildVolY.get(); s3 = root.ent_BuildVolZ.get()
        self.bed_size = (float(s1) if s1 else 0.0, float(s2) if s2 else 0.0, float(s3) if s3 else 0.0)
        s1 = root.ent_NozzleTemp.get(); s2 = root.ent_BedTemp.get()
        self.temperature = (int(s1) if s1 else 0, int(s2) if s2 else 0)
        s1 = root.ent_SpdFr1.get(); s2 = root.ent_SpdFr2.get(); s3 = root.ent_SpdFr3.get()
        self.path_spd_fractions = (float(s1) if s1 else 0.0, float(s2) if s2 else 0.0, float(s3) if s3 else 0.0)
        self.retract_at_layer_change = root.chk_RetractAtLayerChange_var.get()
        self.double_perimeter = root.chk_TwoPerimeters_var.get()
        self.use_ABL = root.chk_UseAutoleveling_var.get() # adds autoleveling to start gcode
        self.ABL_type = root.cmb_AutolevelingType.get() # gcode to start ABL
        # self.ABL_type_list = root.cmb_AutolevelingType_value_list
        self.firmware = root.cmb_Firmware.get() # firmware type
        # self.firmware_list = root.cmb_Firmware_value_list
        self.kinematics = root.cmb_Kinematics.get() # kinematics type
        # self.kinematics_list = root.cmb_Kinematics_value_list
        # self.build_vol = (float(root.ent_BuildVolX.get()), float(root.ent_BuildVolY.get()), float(root.ent_BuildVolZ.get())) #machine build volume

        s = root.ent_FilamentDia.get()
        self.def_fil_dia = float(s) if s else 0.0
        s = root.ent_LineWidth.get()
        self.def_line_width = float(s) if s else 0.0
        s = root.ent_LayerHeight.get()
        self.def_layer = float(s) if s else 0.0
        s = root.ent_FirstLayerSpeed.get()
        self.def_speed_print = float(s) if s else 0.0
        s = root.ent_TravelSpeed.get()
        self.def_speed_travel = float(s) if s else 0.0
        s = root.scl_CoolingPerc.get()
        self.def_cooling = int(s)*5 if s else 0

    # def update_and_create(self):
    #     self.updatesettings()
    #     creategcode()
    
    def save_config(self, path):
        """
        Method for saving configuration to file
        """
        config = configparser.ConfigParser(allow_no_value=True)
        config.add_section("Config")
        config.set("Config", "# slow speed for calibration pattern")
        config.set("Config", "speed_slow", str(self.speed_slow))

        config.set("Config", "# fast speed for calibrtion pattern")
        config.set("Config", "speed_fast", str(self.speed_fast))

        config.set("Config", "# start values for K-factor calibration")
        config.set("Config", "k_start", str(self.k_start))

        config.set("Config", "# stop values for K-factor calibration")
        config.set("Config", "k_end", str(self.k_end))

        config.set("Config", "# step values for K-factor calibration")
        config.set("Config", "k_step", str(self.k_step))

        config.set("Config", "# number of layers printed with any specific K-factor")
        config.set("Config", "layers_per_k", str(self.layers_per_k))

        config.set("Config", "# Z-offset")
        config.set("Config", "z_offset", str(self.z_offset))

        config.set("Config", "# (X, Y) size of the pattern")
        config.set("Config", "size", str(self.size))

        config.set("Config", "# (length, speed) for retractions")
        config.set("Config", "retract", str(self.retract))

        config.set("Config", "# (X, Y, Z) size of the bed")
        config.set("Config", "bed_size", str(self.bed_size))

        config.set("Config", "# (hotend, bed) temperatures")
        config.set("Config", "temperature", str(self.temperature))

        config.set("Config", "# fractions for pattern parts printed with slow and fast speeds")
        config.set("Config", "path_spd_fractions", str(self.path_spd_fractions))

        config.set("Config", "# retract at layer change")
        config.set("Config", "retract_at_layer_change", str(self.retract_at_layer_change))

        config.set("Config", "# print test with two perimeters instead of one")
        config.set("Config", "double_perimeter", str(self.double_perimeter))

        config.set('Config', "# adds autoleveling to start g-code" )
        config.set('Config', "use_ABL", str(self.use_ABL))

        config.set('Config', "# gcode to start ABL")
        config.set('Config', "ABL_type", str(self.ABL_type))

        config.set('Config', "# firmware type")
        config.set('Config', "firmware", str(self.firmware))

        config.set('Config', "# kinematics type")
        config.set('Config', "kinematics", str(self.kinematics))

        config.set("Config", "# filament diameter in mm")
        config.set("Config", "def_fil_dia", str(self.def_fil_dia))

        config.set("Config", "# line width")
        config.set("Config", "def_line_width", str(self.def_line_width))

        config.set("Config", "# layer height")
        config.set("Config", "def_layer", str(self.def_layer))

        config.set("Config", "# default printing speed (first layer, etc.)")
        config.set("Config", "def_speed_print", str(self.def_speed_print))

        config.set("Config", "# defauld travel speed")
        config.set("Config", "def_speed_travel", str(self.def_speed_travel))

        config.set("Config", "# part cooling fan speed (0-100%)")
        config.set("Config", "def_cooling", str(self.def_cooling))

        with open(path, "w") as config_file:
            config.write(config_file)
        print("Configuration saved")

    def read_config(self, path):
        """
        Method for reading configuration from file
        """
        config = configparser.ConfigParser()
        config.read(path)
        self.speed_slow = float(config.get("Config", "speed_slow"))
        self.speed_fast = float(config.get("Config", "speed_fast"))
        self.k_start = float(config.get("Config", "k_start"))
        self.k_end = float(config.get("Config", "k_end"))
        self.k_step = float(config.get("Config", "k_step"))
        self.layers_per_k = int(config.get("Config", "layers_per_k"))
        self.z_offset = float(config.get("Config", "z_offset"))
        self.size = tuple(float(v) for v in re.findall("(\d+(?:\.\d+)?)", config.get("Config", "size")))
        self.retract = tuple(float(v) for v in re.findall("(\d+(?:\.\d+)?)", config.get("Config", "retract")))
        self.bed_size = tuple(float(v) for v in re.findall("(\d+(?:\.\d+)?)", config.get("Config", "bed_size")))
        self.temperature = tuple(int(v) for v in re.findall("(\d+(?:\.\d+)?)", config.get("Config", "temperature")))
        self.path_spd_fractions = tuple(float(v) for v in re.findall("(\d+(?:\.\d+)?)", config.get("Config", "path_spd_fractions")))
        self.retract_at_layer_change = True if "true" in config.get("Config", "retract_at_layer_change").lower() else False
        self.double_perimeter = True if "true" in config.get("Config", "double_perimeter").lower() else False
        self.use_ABL = True if "true" in config.get("Config", "use_ABL").lower() else False
        self.ABL_type = str(config.get("Config", "ABL_type")) if str(config.get("Config", "ABL_type")) in self.ABL_type_list else "G29"
        self.firmware = str(config.get("Config", "firmware")) if str(config.get("Config", "firmware")) in self.firmware_list else "Marlin/Lerdge"
        self.kinematics = str(config.get("Config", "kinematics")) if str(config.get("Config", "kinematics")) in self.kinematics_list else "Cartesian"

        self.def_fil_dia = float(config.get("Config", "def_fil_dia"))
        self.def_line_width = float(config.get("Config", "def_line_width"))
        self.def_layer = float(config.get("Config", "def_layer"))
        self.def_speed_print = float(config.get("Config", "def_speed_print"))
        self.def_speed_travel = float(config.get("Config", "def_speed_travel"))
        self.def_cooling = int(config.get("Config", "def_cooling"))

        print("Configuration loaded")

