#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 5.4
#  in conjunction with Tcl version 8.6
#    Jan 04, 2021 05:36:01 PM +03  platform: Windows NT
import os, re, configparser


class SettingsProfile:
    """
    Class to handle parameters for pattern generation and g-code output
    """

    def __init__(self, name="Default"):
        self.name = name
        self.speed_slow = 20.0  # slow speed for calibration pattern
        self.speed_fast = 100.0  # fast speed for calibrtion pattern
        self.k_start = 0.0  # \
        self.k_end = 0.2  # | start, stop and step values for K-factor calibration
        self.k_step = 0.01  # /
        self.layers_per_k = 5  # number of layers printed with any specific K-factor
        self.z_offset = 0.0  # Z-offset
        self.size = (140.0, 70.0)  # (X, Y) size of the pattern
        self.retract = (4.0, 30.0)  # (length, speed) for retractions
        self.bed_size = (235.0, 235.0, 250.0)  # (X, Y) size of the bed
        self.temperature = (210, 60)  # (hotend, bed) temperatures
        self.path_spd_fractions = (0.2, 0.6, 0.2)  # fractions for pattern parts printed with slow and fast speeds
        self.retract_at_layer_change = True  # retract at layer change
        self.double_perimeter = True  # print test with two perimeters instead of one
        self.use_ABL = False  # adds autoleveling to start g-code
        self.ABL_type = 'G29'  # gcode to start ABL
        self.ABL_type_list = ['G29', 'M83', 'G32', 'BED_MESH_CALIBRATE', ]
        self.firmware = 'Marlin/Lerdge'  # firmware type
        self.firmware_list = ['Marlin/Lerdge', 'Klipper', 'RepRapFirmware', ]
        self.kinematics = 'Cartesian'  # kinematics type
        self.kinematics_list = ['Cartesian', 'Delta', ]

        self.def_fil_dia = 1.75  # filament diameter in mm
        self.def_line_width = 0.4  # line width
        self.def_layer = 0.2  # layer height
        self.def_speed_print = 40.0  # default printing speed (first layer, etc.)
        self.def_speed_travel = 160.0  # default travel speed
        self.def_cooling = 50  # part cooling fan speed (0-100)

    def update(self, ui):
        """Method for updating settings from GUI"""

        def read_float(value, default=0.0):
            return float(value.strip().replace(",", ".")) if value else default

        def read_int(value, default=0):
            return int(value) if value else default

        s = ui.ent_SlowSpeed.get()
        self.speed_slow = read_float(s)
        s = ui.ent_FastSpeed.get()
        self.speed_fast = read_float(s)
        s = ui.ent_StartK.get()
        self.k_start = read_float(s)
        s = ui.ent_StopK.get()
        self.k_end = read_float(s)
        s = ui.ent_StepK.get()
        self.k_step = read_float(s)
        s = ui.ent_LayersPerK.get()
        self.layers_per_k = read_int(s)
        s = ui.ent_Zoffset.get()
        self.z_offset = read_float(s)
        s1 = ui.ent_PatternXsize.get()
        s2 = ui.ent_PatternYsize.get()
        self.size = (read_float(s1), read_float(s2))
        s1 = ui.ent_RetractDist.get()
        s2 = ui.ent_RetractSpeed.get()
        self.retract = (read_float(s1), read_float(s2))
        s1 = ui.ent_BuildVolX.get()
        s2 = ui.ent_BuildVolY.get()
        s3 = ui.ent_BuildVolZ.get()
        self.bed_size = (read_float(s1), read_float(s2), read_float(s3))
        s1 = ui.ent_NozzleTemp.get()
        s2 = ui.ent_BedTemp.get()
        self.temperature = (read_int(s1), read_int(s2))
        s1 = ui.ent_SpdFr1.get()
        s2 = ui.ent_SpdFr2.get()
        s3 = ui.ent_SpdFr3.get()
        self.path_spd_fractions = (read_float(s1), read_float(s2), read_float(s3))
        self.retract_at_layer_change = ui.chk_RetractAtLayerChange_var.get()
        self.double_perimeter = ui.chk_TwoPerimeters_var.get()
        self.use_ABL = ui.chk_UseAutoleveling_var.get()  # adds autoleveling to start gcode
        self.ABL_type = ui.cmb_AutolevelingType.get()  # gcode to start ABL
        self.firmware = ui.cmb_Firmware.get()  # firmware type
        self.kinematics = ui.cmb_Kinematics.get()  # kinematics type

        s = ui.ent_FilamentDia.get()
        self.def_fil_dia = read_float(s)
        s = ui.ent_LineWidth.get()
        self.def_line_width = read_float(s)
        s = ui.ent_LayerHeight.get()
        self.def_layer = read_float(s)
        s = ui.ent_FirstLayerSpeed.get()
        self.def_speed_print = read_float(s)
        s = ui.ent_TravelSpeed.get()
        self.def_speed_travel = read_float(s)
        s = ui.scl_CoolingPerc.get()
        self.def_cooling = read_int(s) * 5

    def store(self, config):
        config.add_section(self.name)
        config.set(self.name, "# slow speed for calibration pattern")
        config.set(self.name, "speed_slow", str(self.speed_slow))

        config.set(self.name, "# fast speed for calibrtion pattern")
        config.set(self.name, "speed_fast", str(self.speed_fast))

        config.set(self.name, "# start values for K-factor calibration")
        config.set(self.name, "k_start", str(self.k_start))

        config.set(self.name, "# stop values for K-factor calibration")
        config.set(self.name, "k_end", str(self.k_end))

        config.set(self.name, "# step values for K-factor calibration")
        config.set(self.name, "k_step", str(self.k_step))

        config.set(self.name, "# number of layers printed with any specific K-factor")
        config.set(self.name, "layers_per_k", str(self.layers_per_k))

        config.set(self.name, "# Z-offset")
        config.set(self.name, "z_offset", str(self.z_offset))

        config.set(self.name, "# (X, Y) size of the pattern")
        config.set(self.name, "size", str(self.size))

        config.set(self.name, "# (length, speed) for retractions")
        config.set(self.name, "retract", str(self.retract))

        config.set(self.name, "# (X, Y, Z) size of the bed")
        config.set(self.name, "bed_size", str(self.bed_size))

        config.set(self.name, "# (hotend, bed) temperatures")
        config.set(self.name, "temperature", str(self.temperature))

        config.set(self.name, "# fractions for pattern parts printed with slow and fast speeds")
        config.set(self.name, "path_spd_fractions", str(self.path_spd_fractions))

        config.set(self.name, "# retract at layer change")
        config.set(self.name, "retract_at_layer_change", str(self.retract_at_layer_change))

        config.set(self.name, "# print test with two perimeters instead of one")
        config.set(self.name, "double_perimeter", str(self.double_perimeter))

        config.set(self.name, "# adds autoleveling to start g-code")
        config.set(self.name, "use_ABL", str(self.use_ABL))

        config.set(self.name, "# gcode to start ABL")
        config.set(self.name, "ABL_type", str(self.ABL_type))

        config.set(self.name, "# firmware type")
        config.set(self.name, "firmware", str(self.firmware))

        config.set(self.name, "# kinematics type")
        config.set(self.name, "kinematics", str(self.kinematics))

        config.set(self.name, "# filament diameter in mm")
        config.set(self.name, "def_fil_dia", str(self.def_fil_dia))

        config.set(self.name, "# line width")
        config.set(self.name, "def_line_width", str(self.def_line_width))

        config.set(self.name, "# layer height")
        config.set(self.name, "def_layer", str(self.def_layer))

        config.set(self.name, "# default printing speed (first layer, etc.)")
        config.set(self.name, "def_speed_print", str(self.def_speed_print))

        config.set(self.name, "# defauld travel speed")
        config.set(self.name, "def_speed_travel", str(self.def_speed_travel))

        config.set(self.name, "# part cooling fan speed (0-100%)")
        config.set(self.name, "def_cooling", str(self.def_cooling))

    def load(self, config):
        def read_val(key):
            return config.get(self.name, key)

        def parse_nums(_type, key):
            return tuple(_type(v) for v in re.findall(
                "(\\d+(?:\\.\\d+)?)", read_val(key)))

        def parse_bool(key):
            return True if "true" in read_val(key).lower() else False

        def parse_list(key, possible, default=0):
            value = str(read_val(key))
            return value if value in possible else possible[default]

        self.speed_slow = float(read_val("speed_slow"))
        self.speed_fast = float(read_val("speed_fast"))
        self.k_start = float(read_val("k_start"))
        self.k_end = float(read_val("k_end"))
        self.k_step = float(read_val("k_step"))
        self.layers_per_k = int(read_val("layers_per_k"))
        self.z_offset = float(read_val("z_offset"))
        self.size = parse_nums(float, "size")
        self.retract = parse_nums(float, "retract")
        self.bed_size = parse_nums(float, "bed_size")
        self.temperature = parse_nums(int, "temperature")
        self.path_spd_fractions = parse_nums(float, "path_spd_fractions")
        self.retract_at_layer_change = parse_bool("retract_at_layer_change")
        self.double_perimeter = parse_bool("double_perimeter")
        self.use_ABL = parse_bool("use_ABL")
        self.ABL_type = parse_list("ABL_type", self.ABL_type_list)
        self.firmware = parse_list("firmware", self.firmware_list)
        self.kinematics = parse_list("kinematics", self.kinematics_list)

        self.def_fil_dia = float(read_val("def_fil_dia"))
        self.def_line_width = float(read_val("def_line_width"))
        self.def_layer = float(read_val("def_layer"))
        self.def_speed_print = float(read_val("def_speed_print"))
        self.def_speed_travel = float(read_val("def_speed_travel"))
        self.def_cooling = int(read_val("def_cooling"))

    def __repr__(self):
        res = "Profile [{}]: ".format(self.name)
        for key in dir(self):
            if key.startswith("_"):
                continue

            item = getattr(self, key)
            if callable(item) or type(item) is list:
                continue

            res += "{} = {}, ".format(key, str(item))

        return res.strip(", ")

    def __str__(self):
        return "Profile: {}".format(self.name)


class SettingClass:
    """
    Class to handle and manipulate settings profiles
    """

    def __init__(self, path):
        self.config_path = path
        self.profiles = {}
        self.current = None
        self.reset()

    def reset(self):
        print("[config] Reset")
        self.profiles = {}
        self.current = SettingsProfile()
        self.add_profile(self.current)

    def get_profiles_list(self):
        return sorted(self.profiles.keys())

    def reset_profile(self):
        self.set_profile(self.get_profiles_list()[0])

    def add_profile(self, profile):
        self.profiles[profile.name] = profile
        print("[config] Added profile: {}".format(profile.name))

    def delete_profile(self, name):
        if len(self.profiles) < 2:
            print("[config] Unable to delete single profile")
            return

        if name in self.profiles:
            del self.profiles[name]
            print("[config] Deleted profile: {}".format(name))
            self.reset_profile()

    def set_profile(self, name):
        if name in self.profiles:
            self.current = self.profiles[name]
            print("[config] Set active profile: {}".format(self.current.name))

    def save_config(self):
        """Method for saving configuration to file"""
        print("[config] Saving to: {}".format(self.config_path))
        config = configparser.ConfigParser(allow_no_value=True)

        for name in self.profiles:
            self.profiles[name].store(config)
            print("[config] Saved profile: {}".format(name))

        with open(self.config_path, "w") as config_file:
            config.write(config_file)
        print("[config] Configuration saved")

    def read_config(self):
        """Method for reading configuration from file"""
        print("[config] Loading from: {}".format(self.config_path))
        config = configparser.ConfigParser()
        config.read(self.config_path)
        self.profiles.clear()

        for section in config.sections():
            print("[config] Loading profile: {}".format(section))
            profile = SettingsProfile(section)
            profile.load(config)
            print("[config] Loaded profile: {}".format(profile.name))
            self.add_profile(profile)

        print("[config] Configuration loaded")
        self.reset_profile()

    def try_load(self):
        """
        Try to load configuration from file.
        Create a default config file if not exists
        """

        if os.path.exists(self.config_path):
            try:
                self.read_config()
            except Exception:
                self.reset_and_save()
        else:
            self.save_config()

    def reset_and_save(self):
        self.reset()
        self.save_config()
