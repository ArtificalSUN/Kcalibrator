#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 5.4
# in conjunction with Tcl version 8.6
# Jan 05, 2021 07:06:20 AM +03  platform: Windows NT

import sys, re, math
from math import sqrt

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import kcalibrator_gui_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    kcalibrator_gui_support.set_Tk_var()
    top = Toplevel (root)
    kcalibrator_gui_support.init(root, top)
    top.register_validator()
    root.mainloop()

w = None
def create_Toplevel(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_Toplevel(root, *args, **kwargs)' .'''
    global w, w_win, root
    #rt = root
    root = rt
    w = tk.Toplevel (root)
    kcalibrator_gui_support.set_Tk_var()
    top = Toplevel (w)
    kcalibrator_gui_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel():
    global w
    w.destroy()
    w = None

def validate(field):
    """
    Validation function.
    Allows to enter only floating point numbers
    """
    regex = re.compile(r"(\+|\-)?[0-9.]*$")
    result = regex.match(field)
    return (field == ""
            or (field.count('+') <= 1
                and field.count('-') <= 1
                and field.count('.') <= 1
                and result is not None
                and result.group(0) != ""))

_bgcolor = '#d9d9d9'  # X11 color: 'gray85'
_fgcolor = '#000000'  # X11 color: 'black'
_compcolor = '#d9d9d9' # X11 color: 'gray85'
_ana1color = '#d9d9d9' # X11 color: 'gray85'
_ana2color = '#ececec' # Closest X11 color: 'gray92'
_tabfg1 = 'black'
_tabfg2 = 'black'
_tabbg1 = 'grey75'
_tabbg2 = 'grey89'
_bgmode = 'light'

_style_code_ran = 0
def _style_code():
    global _style_code_ran
    if _style_code_ran:
       return
    style = ttk.Style()
    if sys.platform == "win32":
       style.theme_use('winnative')
    style.configure('.',background=_bgcolor)
    style.configure('.',foreground=_fgcolor)
    style.configure('.',font='TkDefaultFont')
    style.map('.',background =
       [('selected', _compcolor), ('active',_ana2color)])
    if _bgmode == 'dark':
       style.map('.',foreground =
         [('selected', 'white'), ('active','white')])
    else:
       style.map('.',foreground =
         [('selected', 'black'), ('active','black')])
    _style_code_ran = 1


class Toplevel:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''

        top.geometry("620x430+400+250")
        top.minsize(620, 430)
        top.maxsize(1920, 1080)
        top.resizable(1, 1)
        top.title("Kcalibrator")
        top.configure(highlightcolor="black")

        self.top = top
        self.combobox = tk.StringVar()
        self.che50 = tk.IntVar()
        self.che48 = tk.IntVar()
        self.che58 = tk.IntVar()

        self.lf_PatternConfig = tk.LabelFrame(self.top)
        self.lf_PatternConfig.place(relx=0.016, rely=0.079, relheight=0.547
                                    , relwidth=0.581)
        self.lf_PatternConfig.configure(relief='groove')
        self.lf_PatternConfig.configure(font="-family {Segoe UI} -size 10 -weight bold")
        self.lf_PatternConfig.configure(text='''Pattern configuration''')

        _style_code()
        self._lbl_StartStopStep = ttk.Label(self.lf_PatternConfig)
        self._lbl_StartStopStep.place(relx=0.014, rely=0.085, height=19
                                      , width=299, bordermode='ignore')
        self._lbl_StartStopStep.configure(background="#d9d9d9")
        self._lbl_StartStopStep.configure(foreground="#000000")
        self._lbl_StartStopStep.configure(font="-family {Segoe UI} -size 10")
        self._lbl_StartStopStep.configure(relief="flat")
        self._lbl_StartStopStep.configure(anchor='w')
        self._lbl_StartStopStep.configure(justify='left')
        self._lbl_StartStopStep.configure(takefocus="0")
        self._lbl_StartStopStep.configure(text='''Start, stop and step values for K-factor calibration''')

        self.ent_StartK = ttk.Entry(self.lf_PatternConfig)
        self.ent_StartK.place(relx=0.189, rely=0.191, relheight=0.085
                              , relwidth=0.153, bordermode='ignore')
        self.ent_StartK.configure(font="-family {Segoe UI} -size 10")
        self.ent_StartK.configure(takefocus="")
        self.ent_StartK.configure(cursor="xterm")
        self.ent_StartK_var = tk.StringVar()
        self.ent_StartK.configure(textvariable = self.ent_StartK_var)

        self.ent_StepK = ttk.Entry(self.lf_PatternConfig)
        self.ent_StepK.place(relx=0.831, rely=0.191, relheight=0.085
                             , relwidth=0.153, bordermode='ignore')
        self.ent_StepK.configure(font="-family {Segoe UI} -size 10")
        self.ent_StepK.configure(takefocus="")
        self.ent_StepK.configure(cursor="xterm")
        self.ent_StepK_var = tk.StringVar()
        self.ent_StepK.configure(textvariable=self.ent_StepK_var)

        self._lbl_KFrom = ttk.Label(self.lf_PatternConfig)
        self._lbl_KFrom.place(relx=0.014, rely=0.191, height=20, width=60
                              , bordermode='ignore')
        self._lbl_KFrom.configure(background="#d9d9d9")
        self._lbl_KFrom.configure(foreground="#000000")
        self._lbl_KFrom.configure(font="-family {Segoe UI} -size 10")
        self._lbl_KFrom.configure(relief="flat")
        self._lbl_KFrom.configure(anchor='w')
        self._lbl_KFrom.configure(justify='left')
        self._lbl_KFrom.configure(takefocus="0")
        self._lbl_KFrom.configure(text='''From K =''')

        self._lbl_KTo = ttk.Label(self.lf_PatternConfig)
        self._lbl_KTo.place(relx=0.35, rely=0.191, height=20, width=40
                            , bordermode='ignore')
        self._lbl_KTo.configure(background="#d9d9d9")
        self._lbl_KTo.configure(foreground="#000000")
        self._lbl_KTo.configure(font="-family {Segoe UI} -size 10")
        self._lbl_KTo.configure(relief="flat")
        self._lbl_KTo.configure(anchor='w')
        self._lbl_KTo.configure(justify='left')
        self._lbl_KTo.configure(takefocus="0")
        self._lbl_KTo.configure(text='''to K =''')

        self._lbl_KBy = ttk.Label(self.lf_PatternConfig)
        self._lbl_KBy.place(relx=0.636, rely=0.191, height=22, width=65
                            , bordermode='ignore')
        self._lbl_KBy.configure(background="#d9d9d9")
        self._lbl_KBy.configure(foreground="#000000")
        self._lbl_KBy.configure(font="-family {Segoe UI} -size 10")
        self._lbl_KBy.configure(relief="flat")
        self._lbl_KBy.configure(anchor='w')
        self._lbl_KBy.configure(justify='left')
        self._lbl_KBy.configure(takefocus="0")
        self._lbl_KBy.configure(text='''change by''')

        self._lbl_FastSpeed = ttk.Label(self.lf_PatternConfig)
        self._lbl_FastSpeed.place(relx=0.014, rely=0.532, height=22, width=70
                                  , bordermode='ignore')
        self._lbl_FastSpeed.configure(background="#d9d9d9")
        self._lbl_FastSpeed.configure(foreground="#000000")
        self._lbl_FastSpeed.configure(font="-family {Segoe UI} -size 10")
        self._lbl_FastSpeed.configure(relief="flat")
        self._lbl_FastSpeed.configure(anchor='w')
        self._lbl_FastSpeed.configure(justify='left')
        self._lbl_FastSpeed.configure(takefocus="0")
        self._lbl_FastSpeed.configure(text='''Fast speed''')

        self.ent_FastSpeed = ttk.Entry(self.lf_PatternConfig)
        self.ent_FastSpeed.place(relx=0.214, rely=0.532, relheight=0.085
                                 , relwidth=0.139, bordermode='ignore')
        self.ent_FastSpeed.configure(takefocus="")
        self.ent_FastSpeed.configure(cursor="xterm")
        self.ent_FastSpeed_var = tk.StringVar()
        self.ent_FastSpeed.configure(textvariable = self.ent_FastSpeed_var)

        self._lbl_SlowSpeed = ttk.Label(self.lf_PatternConfig)
        self._lbl_SlowSpeed.place(relx=0.522, rely=0.532, height=22, width=75
                                  , bordermode='ignore')
        self._lbl_SlowSpeed.configure(background="#d9d9d9")
        self._lbl_SlowSpeed.configure(foreground="#000000")
        self._lbl_SlowSpeed.configure(font="-family {Segoe UI} -size 10")
        self._lbl_SlowSpeed.configure(relief="flat")
        self._lbl_SlowSpeed.configure(anchor='w')
        self._lbl_SlowSpeed.configure(justify='left')
        self._lbl_SlowSpeed.configure(takefocus="0")
        self._lbl_SlowSpeed.configure(text='''Slow speed''')

        self.ent_SlowSpeed = ttk.Entry(self.lf_PatternConfig)
        self.ent_SlowSpeed.place(relx=0.722, rely=0.532, relheight=0.085
                                 , relwidth=0.139, bordermode='ignore')
        self.ent_SlowSpeed.configure(font="-family {Segoe UI} -size 10")
        self.ent_SlowSpeed.configure(takefocus="")
        self.ent_SlowSpeed.configure(cursor="xterm")
        self.ent_SlowSpeed_var = tk.StringVar()
        self.ent_SlowSpeed.configure(textvariable=self.ent_SlowSpeed_var)

        self._lbl_Speeds = ttk.Label(self.lf_PatternConfig)
        self._lbl_Speeds.place(relx=0.014, rely=0.426, height=22, width=325
                               , bordermode='ignore')
        self._lbl_Speeds.configure(background="#d9d9d9")
        self._lbl_Speeds.configure(foreground="#000000")
        self._lbl_Speeds.configure(font="-family {Segoe UI} -size 10")
        self._lbl_Speeds.configure(relief="flat")
        self._lbl_Speeds.configure(anchor='w')
        self._lbl_Speeds.configure(justify='left')
        self._lbl_Speeds.configure(takefocus="0")
        self._lbl_Speeds.configure(text='''Speed values for pattern generation''')

        self._lbl_LayersPerK = ttk.Label(self.lf_PatternConfig)
        self._lbl_LayersPerK.place(relx=0.014, rely=0.298, height=22, width=305
                                   , bordermode='ignore')
        self._lbl_LayersPerK.configure(background="#d9d9d9")
        self._lbl_LayersPerK.configure(foreground="#000000")
        self._lbl_LayersPerK.configure(font="-family {Segoe UI} -size 10")
        self._lbl_LayersPerK.configure(relief="flat")
        self._lbl_LayersPerK.configure(anchor='w')
        self._lbl_LayersPerK.configure(justify='left')
        self._lbl_LayersPerK.configure(takefocus="0")
        self._lbl_LayersPerK.configure(text='''Number of layers printed with any specific K-factor''')

        self.ent_StopK = ttk.Entry(self.lf_PatternConfig)
        self.ent_StopK.place(relx=0.472, rely=0.191, relheight=0.085
                             , relwidth=0.153, bordermode='ignore')
        self.ent_StopK.configure(font="-family {Segoe UI} -size 10")
        self.ent_StopK.configure(takefocus="")
        self.ent_StopK.configure(cursor="xterm")
        self.ent_StopK_var = tk.StringVar()
        self.ent_StopK.configure(textvariable=self.ent_StopK_var)

        self.ent_LayersPerK = ttk.Entry(self.lf_PatternConfig)
        self.ent_LayersPerK.place(relx=0.872, rely=0.298, relheight=0.085
                                  , relwidth=0.111, bordermode='ignore')
        self.ent_LayersPerK.configure(takefocus="")
        self.ent_LayersPerK.configure(cursor="xterm")
        self.ent_LayersPerK_var = tk.StringVar()
        self.ent_LayersPerK.configure(textvariable=self.ent_LayersPerK_var)

        self.ent_SpdFr1 = ttk.Entry(self.lf_PatternConfig)
        self.ent_SpdFr1.place(relx=0.478, rely=0.638, relheight=0.085
                              , relwidth=0.139, bordermode='ignore')
        self.ent_SpdFr1.configure(takefocus="")
        self.ent_SpdFr1.configure(cursor="xterm")
        self.ent_SpdFr1_var = tk.StringVar()
        self.ent_SpdFr1.configure(textvariable=self.ent_SpdFr1_var)

        self.ent_SpdFr2 = ttk.Entry(self.lf_PatternConfig)
        self.ent_SpdFr2.place(relx=0.661, rely=0.638, relheight=0.085
                              , relwidth=0.139, bordermode='ignore')
        self.ent_SpdFr2.configure(takefocus="")
        self.ent_SpdFr2.configure(cursor="xterm")
        self.ent_SpdFr2_var = tk.StringVar()
        self.ent_SpdFr2.configure(textvariable=self.ent_SpdFr2_var)

        self.ent_SpdFr3 = ttk.Entry(self.lf_PatternConfig)
        self.ent_SpdFr3.place(relx=0.844, rely=0.638, relheight=0.085
                              , relwidth=0.139, bordermode='ignore')
        self.ent_SpdFr3.configure(takefocus="")
        self.ent_SpdFr3.configure(cursor="xterm")
        self.ent_SpdFr3_var = tk.StringVar()
        self.ent_SpdFr3.configure(textvariable=self.ent_SpdFr3_var)

        self._lbl_SpeedFractions = ttk.Label(self.lf_PatternConfig)
        self._lbl_SpeedFractions.place(relx=0.014, rely=0.638, height=22
                                       , width=160, bordermode='ignore')
        self._lbl_SpeedFractions.configure(background="#d9d9d9")
        self._lbl_SpeedFractions.configure(foreground="#000000")
        self._lbl_SpeedFractions.configure(font="-family {Segoe UI} -size 10")
        self._lbl_SpeedFractions.configure(relief="flat")
        self._lbl_SpeedFractions.configure(anchor='w')
        self._lbl_SpeedFractions.configure(justify='left')
        self._lbl_SpeedFractions.configure(takefocus="0")
        self._lbl_SpeedFractions.configure(text='''Fractions for pattern paths''')

        self._lbl_PatternSize = ttk.Label(self.lf_PatternConfig)
        self._lbl_PatternSize.place(relx=0.014, rely=0.787, height=22, width=160
                                    , bordermode='ignore')
        self._lbl_PatternSize.configure(background="#d9d9d9")
        self._lbl_PatternSize.configure(foreground="#000000")
        self._lbl_PatternSize.configure(font="-family {Segoe UI} -size 10")
        self._lbl_PatternSize.configure(relief="flat")
        self._lbl_PatternSize.configure(anchor='w')
        self._lbl_PatternSize.configure(justify='left')
        self._lbl_PatternSize.configure(takefocus="0")
        self._lbl_PatternSize.configure(text='''Size of the pattern (XxYxZ):''')

        self._lbl_psx = ttk.Label(self.lf_PatternConfig)
        self._lbl_psx.place(relx=0.608, rely=0.787, height=22, width=10
                            , bordermode='ignore')
        self._lbl_psx.configure(background="#d9d9d9")
        self._lbl_psx.configure(foreground="#000000")
        self._lbl_psx.configure(font="-family {Segoe UI} -size 10")
        self._lbl_psx.configure(relief="flat")
        self._lbl_psx.configure(anchor='w')
        self._lbl_psx.configure(justify='left')
        self._lbl_psx.configure(takefocus="0")
        self._lbl_psx.configure(text='''x''')

        self.ent_PatternXsize = ttk.Entry(self.lf_PatternConfig)
        self.ent_PatternXsize.place(relx=0.464, rely=0.787, relheight=0.085
                                    , relwidth=0.139, bordermode='ignore')
        self.ent_PatternXsize.configure(takefocus="")
        self.ent_PatternXsize.configure(cursor="xterm")
        self.ent_PatternXsize_var = tk.StringVar()
        self.ent_PatternXsize.configure(textvariable=self.ent_PatternXsize_var)

        self.ent_PatternYsize = ttk.Entry(self.lf_PatternConfig)
        self.ent_PatternYsize.place(relx=0.642, rely=0.787, relheight=0.085
                                    , relwidth=0.139, bordermode='ignore')
        self.ent_PatternYsize.configure(takefocus="")
        self.ent_PatternYsize.configure(cursor="xterm")
        self.ent_PatternYsize_var = tk.StringVar()
        self.ent_PatternYsize.configure(textvariable=self.ent_PatternYsize_var)

        self.lbl_PatternZsize = ttk.Label(self.lf_PatternConfig)
        self.lbl_PatternZsize.place(relx=0.789, rely=0.787, height=22, width=70
                                    , bordermode='ignore')
        self.lbl_PatternZsize.configure(background="#d9d9d9")
        self.lbl_PatternZsize.configure(foreground="#000000")
        self.lbl_PatternZsize.configure(font="-family {Segoe UI} -size 10")
        self.lbl_PatternZsize.configure(relief="flat")
        self.lbl_PatternZsize.configure(anchor='w')
        self.lbl_PatternZsize.configure(justify='left')
        self.lbl_PatternZsize.configure(takefocus="0")
        self.lbl_PatternZsize.configure(text='''x 100 mm''')

        self.chk_TwoPerimeters = tk.Checkbutton(self.lf_PatternConfig)
        self.chk_TwoPerimeters.place(relx=0.014, rely=0.894, relheight=0.094
                                     , relwidth=0.833, bordermode='ignore')
        self.chk_TwoPerimeters.configure(activebackground="#f9f9f9")
        self.chk_TwoPerimeters.configure(borderwidth="0")
        self.chk_TwoPerimeters.configure(font="-family {Segoe UI} -size 10")
        self.chk_TwoPerimeters.configure(justify='left')
        self.chk_TwoPerimeters.configure(text='''Print pattern with two perimeters instead of one''')
        self.chk_TwoPerimeters_var = tk.BooleanVar()
        self.chk_TwoPerimeters.configure(variable=self.chk_TwoPerimeters_var)

        self._lbl_unitsFastSpeed = ttk.Label(self.lf_PatternConfig)
        self._lbl_unitsFastSpeed.place(relx=0.361, rely=0.532, height=22
                                       , width=40, bordermode='ignore')
        self._lbl_unitsFastSpeed.configure(background="#d9d9d9")
        self._lbl_unitsFastSpeed.configure(foreground="#000000")
        self._lbl_unitsFastSpeed.configure(font="-family {Segoe UI} -size 10")
        self._lbl_unitsFastSpeed.configure(relief="flat")
        self._lbl_unitsFastSpeed.configure(anchor='w')
        self._lbl_unitsFastSpeed.configure(justify='left')
        self._lbl_unitsFastSpeed.configure(takefocus="0")
        self._lbl_unitsFastSpeed.configure(text='''mm/s''')

        self._lbl_unitsSlowSpeed = ttk.Label(self.lf_PatternConfig)
        self._lbl_unitsSlowSpeed.place(relx=0.861, rely=0.532, height=22
                                       , width=40, bordermode='ignore')
        self._lbl_unitsSlowSpeed.configure(background="#d9d9d9")
        self._lbl_unitsSlowSpeed.configure(foreground="#000000")
        self._lbl_unitsSlowSpeed.configure(font="-family {Segoe UI} -size 10")
        self._lbl_unitsSlowSpeed.configure(relief="flat")
        self._lbl_unitsSlowSpeed.configure(anchor='w')
        self._lbl_unitsSlowSpeed.configure(justify='left')
        self._lbl_unitsSlowSpeed.configure(takefocus="0")
        self._lbl_unitsSlowSpeed.configure(text='''mm/s''')

        self.TSeparator1 = ttk.Separator(self.lf_PatternConfig)
        self.TSeparator1.place(relx=-0.006, rely=0.404, relwidth=1.0
                               , bordermode='ignore')

        self.TSeparator2 = ttk.Separator(self.lf_PatternConfig)
        self.TSeparator2.place(relx=-0.011, rely=0.753, relwidth=1.017
                               , bordermode='ignore')

        self.lf_MachineConfig = tk.LabelFrame(self.top)
        self.lf_MachineConfig.place(relx=0.016, rely=0.64, relheight=0.291
                                    , relwidth=0.581)
        self.lf_MachineConfig.configure(relief='groove')
        self.lf_MachineConfig.configure(font="-family {Segoe UI} -size 10 -weight bold")
        self.lf_MachineConfig.configure(text='''Machine configuration''')

        self._lbl_Kinematics = ttk.Label(self.lf_MachineConfig)
        self._lbl_Kinematics.place(relx=0.014, rely=0.2, height=22, width=70
                                   , bordermode='ignore')
        self._lbl_Kinematics.configure(background="#d9d9d9")
        self._lbl_Kinematics.configure(foreground="#000000")
        self._lbl_Kinematics.configure(font="-family {Segoe UI} -size 10")
        self._lbl_Kinematics.configure(relief="flat")
        self._lbl_Kinematics.configure(anchor='w')
        self._lbl_Kinematics.configure(justify='left')
        self._lbl_Kinematics.configure(takefocus="0")
        self._lbl_Kinematics.configure(text='''Kinematics''')

        self.cmb_Kinematics = ttk.Combobox(self.lf_MachineConfig, state=("readonly",))
        self.cmb_Kinematics.place(relx=0.208, rely=0.2, relheight=0.2
                                  , relwidth=0.286, bordermode='ignore')
        self.cmb_Kinematics.configure(font="-family {Segoe UI} -size 10")
        self.cmb_Kinematics.configure(takefocus="")
        self.cmb_Kinematics_var = tk.StringVar()
        self.cmb_Kinematics.configure(textvariable = self.cmb_Kinematics_var)

        self._lbl_FIimware = ttk.Label(self.lf_MachineConfig)
        self._lbl_FIimware.place(relx=0.528, rely=0.2, height=22, width=60
                                 , bordermode='ignore')
        self._lbl_FIimware.configure(background="#d9d9d9")
        self._lbl_FIimware.configure(foreground="#000000")
        self._lbl_FIimware.configure(font="-family {Segoe UI} -size 10")
        self._lbl_FIimware.configure(relief="flat")
        self._lbl_FIimware.configure(anchor='w')
        self._lbl_FIimware.configure(justify='left')
        self._lbl_FIimware.configure(takefocus="0")
        self._lbl_FIimware.configure(text='''Firmware''')

        self.cmb_Firmware = ttk.Combobox(self.lf_MachineConfig, state=("readonly",))
        self.cmb_Firmware.place(relx=0.694, rely=0.2, relheight=0.2
                                , relwidth=0.286, bordermode='ignore')
        self.cmb_Firmware.configure(font="-family {Segoe UI} -size 10")
        self.cmb_Firmware.configure(takefocus="")
        self.cmb_Firmware_var = tk.StringVar()
        self.cmb_Firmware.configure(textvariable = self.cmb_Firmware_var)

        self._lbl_BuildVol = ttk.Label(self.lf_MachineConfig)
        self._lbl_BuildVol.place(relx=0.014, rely=0.48, height=22, width=90
                                 , bordermode='ignore')
        self._lbl_BuildVol.configure(background="#d9d9d9")
        self._lbl_BuildVol.configure(foreground="#000000")
        self._lbl_BuildVol.configure(font="-family {Segoe UI} -size 10")
        self._lbl_BuildVol.configure(relief="flat")
        self._lbl_BuildVol.configure(anchor='w')
        self._lbl_BuildVol.configure(justify='left')
        self._lbl_BuildVol.configure(takefocus="0")
        self._lbl_BuildVol.configure(text='''Build volume:''')

        self.ent_BuildVolY = ttk.Entry(self.lf_MachineConfig)
        self.ent_BuildVolY.place(relx=0.444, rely=0.48, relheight=0.16
                                 , relwidth=0.153, bordermode='ignore')
        self.ent_BuildVolY.configure(takefocus="")
        self.ent_BuildVolY.configure(cursor="xterm")
        self.ent_BuildVolY_var = tk.StringVar()
        self.ent_BuildVolY.configure(textvariable = self.ent_BuildVolY_var)

        self.ent_BuildVolX = ttk.Entry(self.lf_MachineConfig)
        self.ent_BuildVolX.place(relx=0.25, rely=0.48, relheight=0.16
                                 , relwidth=0.153, bordermode='ignore')
        self.ent_BuildVolX.configure(takefocus="")
        self.ent_BuildVolX.configure(cursor="xterm")
        self.ent_BuildVolX_var = tk.StringVar()
        self.ent_BuildVolX.configure(textvariable = self.ent_BuildVolX_var)

        self._lbl_bvx1 = ttk.Label(self.lf_MachineConfig)
        self._lbl_bvx1.place(relx=0.408, rely=0.48, height=22, width=10
                             , bordermode='ignore')
        self._lbl_bvx1.configure(background="#d9d9d9")
        self._lbl_bvx1.configure(foreground="#000000")
        self._lbl_bvx1.configure(font="-family {Segoe UI} -size 10")
        self._lbl_bvx1.configure(relief="flat")
        self._lbl_bvx1.configure(anchor='w')
        self._lbl_bvx1.configure(justify='left')
        self._lbl_bvx1.configure(takefocus="0")
        self._lbl_bvx1.configure(text='''x''')

        self.lbl_bvx2_units = ttk.Label(self.lf_MachineConfig)
        self.lbl_bvx2_units.place(relx=0.603, rely=0.44, height=30, width=120
                                  , bordermode='ignore')
        self.lbl_bvx2_units.configure(background="#d9d9d9")
        self.lbl_bvx2_units.configure(foreground="#000000")
        self.lbl_bvx2_units.configure(font="-family {Segoe UI} -size 10")
        self.lbl_bvx2_units.configure(relief="flat")
        self.lbl_bvx2_units.configure(anchor='w')
        self.lbl_bvx2_units.configure(justify='left')
        self.lbl_bvx2_units.configure(takefocus="0")
        self.lbl_bvx2_units.configure(text='''x''')

        self.lbl_bvx3_units = ttk.Label(self.lf_MachineConfig)
        self.lbl_bvx3_units.place(relx=0.806, rely=0.48, height=22, width=30
                                  , bordermode='ignore')
        self.lbl_bvx3_units.configure(background="#d9d9d9")
        self.lbl_bvx3_units.configure(foreground="#000000")
        self.lbl_bvx3_units.configure(font="-family {Segoe UI} -size 10")
        self.lbl_bvx3_units.configure(relief="flat")
        self.lbl_bvx3_units.configure(anchor='w')
        self.lbl_bvx3_units.configure(justify='left')
        self.lbl_bvx3_units.configure(takefocus="0")
        self.lbl_bvx3_units.configure(text='''mm''')

        self.cmb_AutolevelingType = ttk.Combobox(self.lf_MachineConfig, state=("readonly",))
        self.cmb_AutolevelingType.place(relx=0.778, rely=0.72, relheight=0.2
                                        , relwidth=0.203, bordermode='ignore')
        self.cmb_AutolevelingType.configure(font="-family {Segoe UI} -size 10")
        self.cmb_AutolevelingType.configure(takefocus="")
        self.cmb_AutolevelingType_var = tk.StringVar()
        self.cmb_AutolevelingType.configure(textvariable = self.cmb_AutolevelingType_var)


        self._lbl_AutolevelingType = ttk.Label(self.lf_MachineConfig)
        self._lbl_AutolevelingType.place(relx=0.472, rely=0.72, height=22
                                         , width=105, bordermode='ignore')
        self._lbl_AutolevelingType.configure(background="#d9d9d9")
        self._lbl_AutolevelingType.configure(foreground="#000000")
        self._lbl_AutolevelingType.configure(font="-family {Segoe UI} -size 10")
        self._lbl_AutolevelingType.configure(relief="flat")
        self._lbl_AutolevelingType.configure(anchor='w')
        self._lbl_AutolevelingType.configure(justify='left')
        self._lbl_AutolevelingType.configure(takefocus="0")
        self._lbl_AutolevelingType.configure(text='''Autoleveling type''')

        self.chk_UseAutoleveling = tk.Checkbutton(self.lf_MachineConfig)
        self.chk_UseAutoleveling.place(relx=0.014, rely=0.72, relheight=0.176
                                       , relwidth=0.375, bordermode='ignore')
        self.chk_UseAutoleveling.configure(activebackground="#f9f9f9")
        self.chk_UseAutoleveling.configure(borderwidth="0")
        self.chk_UseAutoleveling.configure(font="-family {Segoe UI} -size 10")
        self.chk_UseAutoleveling.configure(justify='left')
        self.chk_UseAutoleveling.configure(text='''Use autoleveling''')
        self.chk_UseAutoleveling_var = tk.BooleanVar()
        self.chk_UseAutoleveling.configure(variable=self.chk_UseAutoleveling_var)

        self.ent_BuildVolZ = ttk.Entry(self.lf_MachineConfig)
        self.ent_BuildVolZ.place(relx=0.636, rely=0.48, relheight=0.16
                                 , relwidth=0.153, bordermode='ignore')
        self.ent_BuildVolZ.configure(takefocus="")
        self.ent_BuildVolZ.configure(cursor="xterm")
        self.ent_BuildVolZ_var = tk.StringVar()
        self.ent_BuildVolZ.configure(textvariable = self.ent_BuildVolZ_var)

        self.lf_PrintConfig = tk.LabelFrame(self.top)
        self.lf_PrintConfig.place(relx=0.613, rely=0.079, relheight=0.788
                                  , relwidth=0.371)
        self.lf_PrintConfig.configure(relief='groove')
        self.lf_PrintConfig.configure(font="-family {Segoe UI} -size 10 -weight bold")
        self.lf_PrintConfig.configure(text='''Print configuration''')

        self._lbl_NozzleTemp = ttk.Label(self.lf_PrintConfig)
        self._lbl_NozzleTemp.place(relx=0.022, rely=0.059, height=22, width=120
                                   , bordermode='ignore')
        self._lbl_NozzleTemp.configure(background="#d9d9d9")
        self._lbl_NozzleTemp.configure(foreground="#000000")
        self._lbl_NozzleTemp.configure(font="-family {Segoe UI} -size 10")
        self._lbl_NozzleTemp.configure(relief="flat")
        self._lbl_NozzleTemp.configure(anchor='w')
        self._lbl_NozzleTemp.configure(justify='left')
        self._lbl_NozzleTemp.configure(takefocus="0")
        self._lbl_NozzleTemp.configure(text='''Nozzle temperature''')

        self._lbl_BedTemp = ttk.Label(self.lf_PrintConfig)
        self._lbl_BedTemp.place(relx=0.022, rely=0.133, height=22, width=105
                                , bordermode='ignore')
        self._lbl_BedTemp.configure(background="#d9d9d9")
        self._lbl_BedTemp.configure(foreground="#000000")
        self._lbl_BedTemp.configure(font="-family {Segoe UI} -size 10")
        self._lbl_BedTemp.configure(relief="flat")
        self._lbl_BedTemp.configure(anchor='w')
        self._lbl_BedTemp.configure(justify='left')
        self._lbl_BedTemp.configure(takefocus="0")
        self._lbl_BedTemp.configure(text='''Bed temperature''')

        self.ent_NozzleTemp = ttk.Entry(self.lf_PrintConfig)
        self.ent_NozzleTemp.place(relx=0.565, rely=0.059, relheight=0.059
                                  , relwidth=0.239, bordermode='ignore')
        self.ent_NozzleTemp.configure(takefocus="")
        self.ent_NozzleTemp.configure(cursor="xterm")
        self.ent_NozzleTemp_var = tk.StringVar()
        self.ent_NozzleTemp.configure(textvariable = self.ent_NozzleTemp_var)

        self.ent_BedTemp = ttk.Entry(self.lf_PrintConfig)
        self.ent_BedTemp.place(relx=0.565, rely=0.133, relheight=0.059
                               , relwidth=0.239, bordermode='ignore')
        self.ent_BedTemp.configure(takefocus="")
        self.ent_BedTemp.configure(cursor="xterm")
        self.ent_BedTemp_var = tk.StringVar()
        self.ent_BedTemp.configure(textvariable = self.ent_BedTemp_var)

        self.chk_RetractAtLayerChange = tk.Checkbutton(self.lf_PrintConfig)
        self.chk_RetractAtLayerChange.place(relx=0.022, rely=0.442
                                            , relheight=0.065, relwidth=0.674, bordermode='ignore')
        self.chk_RetractAtLayerChange.configure(activebackground="#f9f9f9")
        self.chk_RetractAtLayerChange.configure(borderwidth="0")
        self.chk_RetractAtLayerChange.configure(font="-family {Segoe UI} -size 10")
        self.chk_RetractAtLayerChange.configure(justify='left')
        self.chk_RetractAtLayerChange.configure(text='''Retract at layer change''')
        self.chk_RetractAtLayerChange_var = tk.BooleanVar()
        self.chk_RetractAtLayerChange.configure(variable=self.chk_RetractAtLayerChange_var)

        self._lbl_RetractSpeed = ttk.Label(self.lf_PrintConfig)
        self._lbl_RetractSpeed.place(relx=0.022, rely=0.369, height=22, width=120
                                     , bordermode='ignore')
        self._lbl_RetractSpeed.configure(background="#d9d9d9")
        self._lbl_RetractSpeed.configure(foreground="#000000")
        self._lbl_RetractSpeed.configure(font="-family {Segoe UI} -size 10")
        self._lbl_RetractSpeed.configure(relief="flat")
        self._lbl_RetractSpeed.configure(anchor='w')
        self._lbl_RetractSpeed.configure(justify='left')
        self._lbl_RetractSpeed.configure(takefocus="0")
        self._lbl_RetractSpeed.configure(text='''Retraction speed''')

        self._lbl_RetractDist = ttk.Label(self.lf_PrintConfig)
        self._lbl_RetractDist.place(relx=0.022, rely=0.295, height=22, width=120
                                    , bordermode='ignore')
        self._lbl_RetractDist.configure(background="#d9d9d9")
        self._lbl_RetractDist.configure(foreground="#000000")
        self._lbl_RetractDist.configure(font="-family {Segoe UI} -size 10")
        self._lbl_RetractDist.configure(relief="flat")
        self._lbl_RetractDist.configure(anchor='w')
        self._lbl_RetractDist.configure(justify='left')
        self._lbl_RetractDist.configure(takefocus="0")
        self._lbl_RetractDist.configure(text='''Retraction distance''')

        self.ent_RetractDist = ttk.Entry(self.lf_PrintConfig)
        self.ent_RetractDist.place(relx=0.565, rely=0.295, relheight=0.059
                                   , relwidth=0.239, bordermode='ignore')
        self.ent_RetractDist.configure(takefocus="")
        self.ent_RetractDist.configure(cursor="xterm")
        self.ent_RetractDist_var = tk.StringVar()
        self.ent_RetractDist.configure(textvariable = self.ent_RetractDist_var)

        self.ent_RetractSpeed = ttk.Entry(self.lf_PrintConfig)
        self.ent_RetractSpeed.place(relx=0.565, rely=0.369, relheight=0.059
                                    , relwidth=0.239, bordermode='ignore')
        self.ent_RetractSpeed.configure(takefocus="")
        self.ent_RetractSpeed.configure(cursor="xterm")
        self.ent_RetractSpeed_var = tk.StringVar()
        self.ent_RetractSpeed.configure(textvariable = self.ent_RetractSpeed_var)

        self._lbl_unitsRetractDist = ttk.Label(self.lf_PrintConfig)
        self._lbl_unitsRetractDist.place(relx=0.804, rely=0.295, height=22
                                         , width=30, bordermode='ignore')
        self._lbl_unitsRetractDist.configure(background="#d9d9d9")
        self._lbl_unitsRetractDist.configure(foreground="#000000")
        self._lbl_unitsRetractDist.configure(font="-family {Segoe UI} -size 10")
        self._lbl_unitsRetractDist.configure(relief="flat")
        self._lbl_unitsRetractDist.configure(anchor='w')
        self._lbl_unitsRetractDist.configure(justify='left')
        self._lbl_unitsRetractDist.configure(takefocus="0")
        self._lbl_unitsRetractDist.configure(text='''mm''')

        self._lbl_unitsRetractSpeed = ttk.Label(self.lf_PrintConfig)
        self._lbl_unitsRetractSpeed.place(relx=0.804, rely=0.369, height=22
                                          , width=40, bordermode='ignore')
        self._lbl_unitsRetractSpeed.configure(background="#d9d9d9")
        self._lbl_unitsRetractSpeed.configure(foreground="#000000")
        self._lbl_unitsRetractSpeed.configure(font="-family {Segoe UI} -size 10")
        self._lbl_unitsRetractSpeed.configure(relief="flat")
        self._lbl_unitsRetractSpeed.configure(anchor='w')
        self._lbl_unitsRetractSpeed.configure(justify='left')
        self._lbl_unitsRetractSpeed.configure(takefocus="0")
        self._lbl_unitsRetractSpeed.configure(text='''mm/s''')

        self._lbl_unitsNozzleTemp = ttk.Label(self.lf_PrintConfig)
        self._lbl_unitsNozzleTemp.place(relx=0.804, rely=0.059, height=22
                                        , width=20, bordermode='ignore')
        self._lbl_unitsNozzleTemp.configure(background="#d9d9d9")
        self._lbl_unitsNozzleTemp.configure(foreground="#000000")
        self._lbl_unitsNozzleTemp.configure(font="-family {Segoe UI} -size 10")
        self._lbl_unitsNozzleTemp.configure(relief="flat")
        self._lbl_unitsNozzleTemp.configure(anchor='w')
        self._lbl_unitsNozzleTemp.configure(justify='left')
        self._lbl_unitsNozzleTemp.configure(takefocus="0")
        self._lbl_unitsNozzleTemp.configure(text='''°C''')

        self._lbl_unitsBedTemp = ttk.Label(self.lf_PrintConfig)
        self._lbl_unitsBedTemp.place(relx=0.804, rely=0.133, height=22, width=20
                                     , bordermode='ignore')
        self._lbl_unitsBedTemp.configure(background="#d9d9d9")
        self._lbl_unitsBedTemp.configure(foreground="#000000")
        self._lbl_unitsBedTemp.configure(font="-family {Segoe UI} -size 10")
        self._lbl_unitsBedTemp.configure(relief="flat")
        self._lbl_unitsBedTemp.configure(anchor='w')
        self._lbl_unitsBedTemp.configure(justify='left')
        self._lbl_unitsBedTemp.configure(takefocus="0")
        self._lbl_unitsBedTemp.configure(text='''°C''')

        self._lbl_Cooling = ttk.Label(self.lf_PrintConfig)
        self._lbl_Cooling.place(relx=0.022, rely=0.206, height=22, width=50
                                , bordermode='ignore')
        self._lbl_Cooling.configure(background="#d9d9d9")
        self._lbl_Cooling.configure(foreground="#000000")
        self._lbl_Cooling.configure(font="-family {Segoe UI} -size 10")
        self._lbl_Cooling.configure(relief="flat")
        self._lbl_Cooling.configure(anchor='w')
        self._lbl_Cooling.configure(justify='left')
        self._lbl_Cooling.configure(takefocus="0")
        self._lbl_Cooling.configure(text='''Cooling''')

        self.lbl_CoolingPerc = ttk.Label(self.lf_PrintConfig)
        self.lbl_CoolingPerc.place(relx=0.804, rely=0.206, height=22, width=40
                                   , bordermode='ignore')
        self.lbl_CoolingPerc.configure(background="#d9d9d9")
        self.lbl_CoolingPerc.configure(foreground="#000000")
        self.lbl_CoolingPerc.configure(font="-family {Segoe UI} -size 10")
        self.lbl_CoolingPerc.configure(relief="flat")
        self.lbl_CoolingPerc.configure(anchor='w')
        self.lbl_CoolingPerc.configure(justify='left')
        self.lbl_CoolingPerc.configure(takefocus="0")
        self.lbl_CoolingPerc.configure(text='''50%''')

        self.TSeparator3 = ttk.Separator(self.lf_PrintConfig)
        self.TSeparator3.place(relx=-0.039, rely=0.28, relwidth=1.048
                               , bordermode='ignore')

        self.TSeparator4 = ttk.Separator(self.lf_PrintConfig)
        self.TSeparator4.place(relx=-0.017, rely=0.522, relwidth=1.013
                               , bordermode='ignore')

        self._lbl_FirstLayerSpeed = ttk.Label(self.lf_PrintConfig)
        self._lbl_FirstLayerSpeed.place(relx=0.022, rely=0.546, height=22
                                        , width=120, bordermode='ignore')
        self._lbl_FirstLayerSpeed.configure(background="#d9d9d9")
        self._lbl_FirstLayerSpeed.configure(foreground="#000000")
        self._lbl_FirstLayerSpeed.configure(font="-family {Segoe UI} -size 10")
        self._lbl_FirstLayerSpeed.configure(relief="flat")
        self._lbl_FirstLayerSpeed.configure(anchor='w')
        self._lbl_FirstLayerSpeed.configure(justify='left')
        self._lbl_FirstLayerSpeed.configure(takefocus="0")
        self._lbl_FirstLayerSpeed.configure(text='''First layer speed''')

        self._lbl_TravelSpeed = ttk.Label(self.lf_PrintConfig)
        self._lbl_TravelSpeed.place(relx=0.022, rely=0.619, height=22, width=120
                                    , bordermode='ignore')
        self._lbl_TravelSpeed.configure(background="#d9d9d9")
        self._lbl_TravelSpeed.configure(foreground="#000000")
        self._lbl_TravelSpeed.configure(font="-family {Segoe UI} -size 10")
        self._lbl_TravelSpeed.configure(relief="flat")
        self._lbl_TravelSpeed.configure(anchor='w')
        self._lbl_TravelSpeed.configure(justify='left')
        self._lbl_TravelSpeed.configure(takefocus="0")
        self._lbl_TravelSpeed.configure(text='''Travel speed''')

        self._lbl_LineWidth = ttk.Label(self.lf_PrintConfig)
        self._lbl_LineWidth.place(relx=0.022, rely=0.708, height=22, width=120
                                  , bordermode='ignore')
        self._lbl_LineWidth.configure(background="#d9d9d9")
        self._lbl_LineWidth.configure(foreground="#000000")
        self._lbl_LineWidth.configure(font="-family {Segoe UI} -size 10")
        self._lbl_LineWidth.configure(relief="flat")
        self._lbl_LineWidth.configure(anchor='w')
        self._lbl_LineWidth.configure(justify='left')
        self._lbl_LineWidth.configure(takefocus="0")
        self._lbl_LineWidth.configure(text='''Line width''')

        self._lbl_LayerHeight = ttk.Label(self.lf_PrintConfig)
        self._lbl_LayerHeight.place(relx=0.022, rely=0.782, height=22, width=120
                                    , bordermode='ignore')
        self._lbl_LayerHeight.configure(background="#d9d9d9")
        self._lbl_LayerHeight.configure(foreground="#000000")
        self._lbl_LayerHeight.configure(font="-family {Segoe UI} -size 10")
        self._lbl_LayerHeight.configure(relief="flat")
        self._lbl_LayerHeight.configure(anchor='w')
        self._lbl_LayerHeight.configure(justify='left')
        self._lbl_LayerHeight.configure(takefocus="0")
        self._lbl_LayerHeight.configure(text='''Layer height''')

        self._lbl_FilamentDia = ttk.Label(self.lf_PrintConfig)
        self._lbl_FilamentDia.place(relx=0.022, rely=0.855, height=22, width=120
                                    , bordermode='ignore')
        self._lbl_FilamentDia.configure(background="#d9d9d9")
        self._lbl_FilamentDia.configure(foreground="#000000")
        self._lbl_FilamentDia.configure(font="-family {Segoe UI} -size 10")
        self._lbl_FilamentDia.configure(relief="flat")
        self._lbl_FilamentDia.configure(anchor='w')
        self._lbl_FilamentDia.configure(justify='left')
        self._lbl_FilamentDia.configure(takefocus="0")
        self._lbl_FilamentDia.configure(text='''Filament diameter''')

        self.ent_FirstLayerSpeed = ttk.Entry(self.lf_PrintConfig)
        self.ent_FirstLayerSpeed.place(relx=0.565, rely=0.546, relheight=0.059
                                       , relwidth=0.239, bordermode='ignore')
        self.ent_FirstLayerSpeed.configure(takefocus="")
        self.ent_FirstLayerSpeed.configure(cursor="xterm")
        self.ent_FirstLayerSpeed_var = tk.StringVar()
        self.ent_FirstLayerSpeed.configure(textvariable = self.ent_FirstLayerSpeed_var)

        self.ent_TravelSpeed = ttk.Entry(self.lf_PrintConfig)
        self.ent_TravelSpeed.place(relx=0.565, rely=0.619, relheight=0.059
                                   , relwidth=0.239, bordermode='ignore')
        self.ent_TravelSpeed.configure(takefocus="")
        self.ent_TravelSpeed.configure(cursor="xterm")
        self.ent_TravelSpeed_var = tk.StringVar()
        self.ent_TravelSpeed.configure(textvariable = self.ent_TravelSpeed_var)

        self.TSeparator5 = ttk.Separator(self.lf_PrintConfig)
        self.TSeparator5.place(relx=-0.009, rely=0.693, relwidth=1.039
                               , bordermode='ignore')

        self.ent_LineWidth = ttk.Entry(self.lf_PrintConfig)
        self.ent_LineWidth.place(relx=0.565, rely=0.708, relheight=0.059
                                 , relwidth=0.239, bordermode='ignore')
        self.ent_LineWidth.configure(takefocus="")
        self.ent_LineWidth.configure(cursor="xterm")
        self.ent_LineWidth_var = tk.StringVar()
        self.ent_LineWidth.configure(textvariable = self.ent_LineWidth_var)

        self.ent_LayerHeight = ttk.Entry(self.lf_PrintConfig)
        self.ent_LayerHeight.place(relx=0.565, rely=0.782, relheight=0.059
                                   , relwidth=0.239, bordermode='ignore')
        self.ent_LayerHeight.configure(takefocus="")
        self.ent_LayerHeight.configure(cursor="xterm")
        self.ent_LayerHeight_var = tk.StringVar()
        self.ent_LayerHeight.configure(textvariable = self.ent_LayerHeight_var)

        self.ent_FilamentDia = ttk.Entry(self.lf_PrintConfig)
        self.ent_FilamentDia.place(relx=0.565, rely=0.855, relheight=0.059
                                   , relwidth=0.239, bordermode='ignore')
        self.ent_FilamentDia.configure(takefocus="")
        self.ent_FilamentDia.configure(cursor="xterm")
        self.ent_FilamentDia_var = tk.StringVar()
        self.ent_FilamentDia.configure(textvariable = self.ent_FilamentDia_var)

        self._lbl_unitsLineWidth = ttk.Label(self.lf_PrintConfig)
        self._lbl_unitsLineWidth.place(relx=0.804, rely=0.708, height=22
                                       , width=30, bordermode='ignore')
        self._lbl_unitsLineWidth.configure(background="#d9d9d9")
        self._lbl_unitsLineWidth.configure(foreground="#000000")
        self._lbl_unitsLineWidth.configure(font="-family {Segoe UI} -size 10")
        self._lbl_unitsLineWidth.configure(relief="flat")
        self._lbl_unitsLineWidth.configure(anchor='w')
        self._lbl_unitsLineWidth.configure(justify='left')
        self._lbl_unitsLineWidth.configure(takefocus="0")
        self._lbl_unitsLineWidth.configure(text='''mm''')

        self._lbl_unitsLayerHeight = ttk.Label(self.lf_PrintConfig)
        self._lbl_unitsLayerHeight.place(relx=0.804, rely=0.782, height=22
                                         , width=30, bordermode='ignore')
        self._lbl_unitsLayerHeight.configure(background="#d9d9d9")
        self._lbl_unitsLayerHeight.configure(foreground="#000000")
        self._lbl_unitsLayerHeight.configure(font="-family {Segoe UI} -size 10")
        self._lbl_unitsLayerHeight.configure(relief="flat")
        self._lbl_unitsLayerHeight.configure(anchor='w')
        self._lbl_unitsLayerHeight.configure(justify='left')
        self._lbl_unitsLayerHeight.configure(takefocus="0")
        self._lbl_unitsLayerHeight.configure(text='''mm''')

        self._lbl_unitsFilamentDia = ttk.Label(self.lf_PrintConfig)
        self._lbl_unitsFilamentDia.place(relx=0.804, rely=0.855, height=22
                                         , width=30, bordermode='ignore')
        self._lbl_unitsFilamentDia.configure(background="#d9d9d9")
        self._lbl_unitsFilamentDia.configure(foreground="#000000")
        self._lbl_unitsFilamentDia.configure(font="-family {Segoe UI} -size 10")
        self._lbl_unitsFilamentDia.configure(relief="flat")
        self._lbl_unitsFilamentDia.configure(anchor='w')
        self._lbl_unitsFilamentDia.configure(justify='left')
        self._lbl_unitsFilamentDia.configure(takefocus="0")
        self._lbl_unitsFilamentDia.configure(text='''mm''')

        self._lbl_unitsFirstLayerSpeed = ttk.Label(self.lf_PrintConfig)
        self._lbl_unitsFirstLayerSpeed.place(relx=0.804, rely=0.546, height=22
                                             , width=30, bordermode='ignore')
        self._lbl_unitsFirstLayerSpeed.configure(background="#d9d9d9")
        self._lbl_unitsFirstLayerSpeed.configure(foreground="#000000")
        self._lbl_unitsFirstLayerSpeed.configure(font="-family {Segoe UI} -size 10")
        self._lbl_unitsFirstLayerSpeed.configure(relief="flat")
        self._lbl_unitsFirstLayerSpeed.configure(anchor='w')
        self._lbl_unitsFirstLayerSpeed.configure(justify='left')
        self._lbl_unitsFirstLayerSpeed.configure(takefocus="0")
        self._lbl_unitsFirstLayerSpeed.configure(text='''mm''')

        self._lbl_unitsTravelSpeed = ttk.Label(self.lf_PrintConfig)
        self._lbl_unitsTravelSpeed.place(relx=0.804, rely=0.619, height=22
                                         , width=30, bordermode='ignore')
        self._lbl_unitsTravelSpeed.configure(background="#d9d9d9")
        self._lbl_unitsTravelSpeed.configure(foreground="#000000")
        self._lbl_unitsTravelSpeed.configure(font="-family {Segoe UI} -size 10")
        self._lbl_unitsTravelSpeed.configure(relief="flat")
        self._lbl_unitsTravelSpeed.configure(anchor='w')
        self._lbl_unitsTravelSpeed.configure(justify='left')
        self._lbl_unitsTravelSpeed.configure(takefocus="0")
        self._lbl_unitsTravelSpeed.configure(text='''mm''')

        self.scl_CoolingPerc = ttk.Scale(self.lf_PrintConfig, from_=0, to=20)
        self.scl_CoolingPerc.place(relx=0.261, rely=0.215, relwidth=0.522,
                                   relheight=0.0, height=20, bordermode='ignore')
        self.scl_CoolingPerc.configure(value="10")
        self.scl_CoolingPerc.configure(length="20")
        self.scl_CoolingPerc.configure(takefocus="")
        self.scl_CoolingPerc_var = tk.IntVar()
        self.scl_CoolingPerc.configure(variable = self.scl_CoolingPerc_var)

        self._lbl_Zoffset = ttk.Label(self.lf_PrintConfig)
        self._lbl_Zoffset.place(relx=0.022, rely=0.926, height=22, width=120
                                , bordermode='ignore')
        self._lbl_Zoffset.configure(background="#d9d9d9")
        self._lbl_Zoffset.configure(foreground="#000000")
        self._lbl_Zoffset.configure(font="-family {Segoe UI} -size 10")
        self._lbl_Zoffset.configure(relief="flat")
        self._lbl_Zoffset.configure(anchor='w')
        self._lbl_Zoffset.configure(justify='left')
        self._lbl_Zoffset.configure(takefocus="0")
        self._lbl_Zoffset.configure(text='''Z offset''')

        self._lbl_unitsZoffset = ttk.Label(self.lf_PrintConfig)
        self._lbl_unitsZoffset.place(relx=0.804, rely=0.926, height=22, width=30
                                     , bordermode='ignore')
        self._lbl_unitsZoffset.configure(background="#d9d9d9")
        self._lbl_unitsZoffset.configure(foreground="#000000")
        self._lbl_unitsZoffset.configure(font="-family {Segoe UI} -size 10")
        self._lbl_unitsZoffset.configure(relief="flat")
        self._lbl_unitsZoffset.configure(anchor='w')
        self._lbl_unitsZoffset.configure(justify='left')
        self._lbl_unitsZoffset.configure(takefocus="0")
        self._lbl_unitsZoffset.configure(text='''mm''')

        self.ent_Zoffset = ttk.Entry(self.lf_PrintConfig)
        self.ent_Zoffset.place(relx=0.565, rely=0.929, relheight=0.059
                               , relwidth=0.239, bordermode='ignore')
        self.ent_Zoffset.configure(takefocus="")
        self.ent_Zoffset.configure(cursor="xterm")
        self.ent_Zoffset_var = tk.StringVar()
        self.ent_Zoffset.configure(textvariable = self.ent_Zoffset_var)

        self.btn_SaveConfig = ttk.Button(self.top)
        self.btn_SaveConfig.place(relx=0.79, rely=0.012, height=25, width=116)
        self.btn_SaveConfig.configure(takefocus="")
        self.btn_SaveConfig.configure(text='''Save configuration''')

        self.btn_Generate = ttk.Button(self.top)
        self.btn_Generate.place(relx=0.613, rely=0.87, height=25, width=226)
        self.btn_Generate.configure(takefocus="")
        self.btn_Generate.configure(text='''Generate G-code''')

        self.btn_AddProfile = ttk.Button(self.top)
        self.btn_AddProfile.place(relx=0.624, rely=0.012, height=25, width=100)
        self.btn_AddProfile.configure(takefocus="")
        self.btn_AddProfile.configure(text='''Add Profile''')

        self.btn_DelProfile = ttk.Button(self.top)
        self.btn_DelProfile.place(relx=0.458, rely=0.012, height=25, width=100)
        self.btn_DelProfile.configure(takefocus="")
        self.btn_DelProfile.configure(text='''Del Profile''')

        self.cmb_CurrProfile = ttk.Combobox(self.top, state=("readonly",))
        self.cmb_CurrProfile.place(relx=0.194, rely=0.012, relheight=0.058
                              , relwidth=0.253)
        self.cmb_CurrProfile.configure(takefocus="")
        self.cmb_CurrProfile_var = tk.StringVar()
        self.cmb_CurrProfile.configure(textvariable=self.cmb_CurrProfile_var)

        self.menubar = tk.Menu(top, font="TkMenuFont", bg=_bgcolor, fg=_fgcolor)
        top.configure(menu=self.menubar)

        self._lbl_CurrProfile = ttk.Label(self.top)
        self._lbl_CurrProfile.place(relx=0.023, rely=0.021, height=22, width=100)

        self._lbl_CurrProfile.configure(background="#d9d9d9")
        self._lbl_CurrProfile.configure(foreground="#000000")
        self._lbl_CurrProfile.configure(font="-family {Segoe UI} -size 10")
        self._lbl_CurrProfile.configure(relief="flat")
        self._lbl_CurrProfile.configure(anchor='w')
        self._lbl_CurrProfile.configure(justify='left')
        self._lbl_CurrProfile.configure(takefocus="0")
        self._lbl_CurrProfile.configure(text='''Current profile:''')

        self._lbl_Kcalc1 = ttk.Label(self.top)
        self._lbl_Kcalc1.place(relx=0.015, rely=0.94, height=22, width=190)
        self._lbl_Kcalc1.configure(background="#d9d9d9")
        self._lbl_Kcalc1.configure(foreground="#000000")
        self._lbl_Kcalc1.configure(font="-family {Segoe UI} -size 10")
        self._lbl_Kcalc1.configure(relief="flat")
        self._lbl_Kcalc1.configure(anchor='w')
        self._lbl_Kcalc1.configure(justify='left')
        self._lbl_Kcalc1.configure(takefocus="0")
        self._lbl_Kcalc1.configure(text='''Height with the best quality:''')
        self._lbl_Kcalc1.configure(cursor="fleur")

        self.ent_Hmeasured = ttk.Entry(self.top)
        self.ent_Hmeasured.place(relx=0.323, rely=0.94, relheight=0.047
                                 , relwidth=0.089)
        self.ent_Hmeasured.configure(takefocus="")
        self.ent_Hmeasured.configure(cursor="xterm")
        self.ent_Hmeasured_var = tk.StringVar()
        self.ent_Hmeasured.configure(textvariable=self.ent_Hmeasured_var)
        self.ent_Hmeasured.configure(validate="key", validatecommand=(
            self.ent_Hmeasured.register(validate), "%P"))

        self._lbl_Kcalc2 = ttk.Label(self.top)
        self._lbl_Kcalc2.place(relx=0.419, rely=0.942, height=22, width=30)
        self._lbl_Kcalc2.configure(background="#d9d9d9")
        self._lbl_Kcalc2.configure(foreground="#000000")
        self._lbl_Kcalc2.configure(font="-family {Segoe UI} -size 10")
        self._lbl_Kcalc2.configure(relief="flat")
        self._lbl_Kcalc2.configure(anchor='w')
        self._lbl_Kcalc2.configure(justify='left')
        self._lbl_Kcalc2.configure(takefocus="0")
        self._lbl_Kcalc2.configure(text='''mm''')

        self.lbl_K = ttk.Label(self.top)
        self.lbl_K.place(relx=0.61, rely=0.942, height=22, width=230)
        self.lbl_K.configure(background="#d9d9d9")
        self.lbl_K.configure(foreground="#000000")
        self.lbl_K.configure(font="-family {Segoe UI} -size 10 -weight bold")
        self.lbl_K.configure(relief="flat")
        self.lbl_K.configure(anchor='w')
        self.lbl_K.configure(justify='left')
        self.lbl_K.configure(takefocus="0")
        self.lbl_K.configure(cursor="fleur")

    # Attaching traces and handlers
    def attach(self):
        self.ent_PatternXsize_var.trace_add('write', lambda name, index, mode: self.validate_pattern_X())
        self.ent_BuildVolX_var.trace_add('write', lambda name, index, mode: self.validate_pattern_X())
        self.ent_PatternYsize_var.trace_add('write', lambda name, index, mode: self.validate_pattern_Y())
        self.ent_BuildVolY_var.trace_add('write', lambda name, index, mode: self.validate_pattern_Y())
        self.ent_BuildVolZ_var.trace_add('write', lambda name, index, mode: self.validate_pattern_Z())
        self.ent_StartK_var.trace_add('write', lambda name, index, mode: self.validate_pattern_Z())
        self.ent_StartK_var.trace_add('write', lambda name, index, mode: self.calculate_K())
        self.ent_StopK_var.trace_add('write', lambda name, index, mode: self.validate_pattern_Z())
        self.ent_StepK_var.trace_add('write', lambda name, index, mode: self.validate_pattern_Z())
        self.ent_StepK_var.trace_add('write', lambda name, index, mode: self.calculate_K())
        self.ent_LayersPerK_var.trace_add('write', lambda name, index, mode: self.validate_pattern_Z())
        self.ent_LayersPerK_var.trace_add('write', lambda name, index, mode: self.calculate_K())
        self.ent_LayerHeight_var.trace_add('write', lambda name, index, mode: self.validate_pattern_Z())
        self.ent_LayerHeight_var.trace_add('write', lambda name, index, mode: self.calculate_K())
        self.ent_Hmeasured_var.trace_add('write', lambda name, index, mode: self.calculate_K())
        self.chk_UseAutoleveling.configure(command = self.handle_ABL_chk)
        # self.scl_CoolingPerc.configure(command = self.handle_Cooling_scl)
        self.scl_CoolingPerc_var.trace_add('write', lambda name, index, mode: self.handle_Cooling_scl())
        self.cmb_Kinematics_var.trace_add('write', lambda name, index, mode: self.handle_Kinematics_cmb())
        self.cmb_CurrProfile_var.trace_add('write', lambda name, index, mode: self.handle_profile_change())

    def register_validator(self):
        for member in vars(self):
            entry = getattr(self, member)
            if isinstance(entry, ttk.Entry) and member.startswith("ent_"):
                entry.configure(validate = "key", validatecommand = (entry.register(validate), "%P"))

    def set_profile_list(self, profiles):
        self.cmb_CurrProfile.configure(values=profiles)
        self.btn_DelProfile.configure(state=("normal",) if len(profiles) > 1 else ("disabled",))

    def updateUI(self, config):
        self.cmb_CurrProfile.set(config.name)
        self.ent_SlowSpeed_var.set(str(config.speed_slow))
        self.ent_FastSpeed_var.set(str(config.speed_fast))
        self.ent_StartK_var.set(str(config.k_start))
        self.ent_StopK_var.set(str(config.k_end))
        self.ent_StepK_var.set(str(config.k_step))
        self.ent_LayersPerK_var.set(str(config.layers_per_k))
        self.ent_Zoffset_var.set(str(config.z_offset))

        self.ent_PatternXsize_var.set(str(config.size[0]))
        self.ent_PatternYsize_var.set(str(config.size[1]))

        self.ent_RetractDist_var.set(str(config.retract[0]))
        self.ent_RetractSpeed_var.set(str(config.retract[1]))
        self.ent_BuildVolX_var.set(str(config.bed_size[0]))
        self.ent_BuildVolY_var.set(str(config.bed_size[1]))
        self.ent_BuildVolZ_var.set(str(config.bed_size[2]))
        self.ent_NozzleTemp_var.set(str(config.temperature[0]))
        self.ent_BedTemp_var.set(str(config.temperature[1]))
        self.ent_SpdFr1_var.set(str(config.path_spd_fractions[0]))
        self.ent_SpdFr2_var.set(str(config.path_spd_fractions[1]))
        self.ent_SpdFr3_var.set(str(config.path_spd_fractions[2]))
        self.chk_RetractAtLayerChange_var.set(config.retract_at_layer_change)
        self.chk_TwoPerimeters_var.set(config.double_perimeter)

        self.chk_UseAutoleveling_var.set(config.use_ABL)
        self.cmb_AutolevelingType.configure(values=config.ABL_type_list)
        self.cmb_AutolevelingType.set(config.ABL_type)
        self.cmb_AutolevelingType.configure(state=("readonly",) if config.use_ABL else ("disabled",))

        self.cmb_Firmware.configure(values=config.firmware_list)
        self.cmb_Firmware.set(config.firmware)
        self.cmb_Kinematics.configure(values=config.kinematics_list)
        self.cmb_Kinematics.set(config.kinematics)

        self.ent_FilamentDia_var.set(str(config.def_fil_dia))
        self.ent_LineWidth_var.set(str(config.def_line_width))
        self.ent_LayerHeight_var.set(str(config.def_layer))
        self.ent_FirstLayerSpeed_var.set(str(config.def_speed_print))
        self.ent_TravelSpeed_var.set(str(config.def_speed_travel))
        self.lbl_CoolingPerc['text'] = '%s%%' % config.def_cooling
        self.scl_CoolingPerc.set(config.def_cooling/5)

    def handle_profile_change(self):
        pass

    def pattern_height(self):
        try:
             # stopk = float(self.ent_StopK.get()) if self.ent_StopK.get() else 0.0
             # startk = float(self.ent_StartK.get()) if self.ent_StartK.get() else 0.0
             # stepk = float(self.ent_StepK.get()) if self.ent_StepK.get() else 0.0
             # k_values = abs(stopk - startk)/stepk
             # layerk = int(self.ent_LayersPerK.get()) if self.ent_LayersPerK.get() else 0
             # layerh = float(self.ent_LayerHeight.get()) if self.ent_LayerHeight.get() else 0
             # height = k_values * layerh * layerk
             k_values = abs(float(self.ent_StopK.get())-float(self.ent_StartK.get()))/float(self.ent_StepK.get())
             height = k_values * int(self.ent_LayersPerK.get()) * float(self.ent_LayerHeight.get())
        except:
            height = 0
        return height

    def calculate_K(self):
        try:
            H = float(self.ent_Hmeasured_var.get())
            Kn = float(self.ent_StartK_var.get())
            L = float(self.ent_LayerHeight_var.get())
            dK = float(self.ent_StepK_var.get())
            Nsk = float(self.ent_LayersPerK_var.get())
            result = Kn + int(H/(L*Nsk))*dK
            self.lbl_K['text'] = "Calculated K-factor = %s" % round(result, 3)
            self.lbl_K.configure(foreground="#007c00")
            return result
        except:
            self.lbl_K['text'] = "Error calculating K-factor"
            self.lbl_K.configure(foreground="#ff0000")

    def validate_pattern_X(self):
        # size = float(self.ent_PatternXsize.get()) if self.ent_PatternXsize.get() else 0.0
        # vol = float(self.ent_BuildVolX.get()) if self.ent_BuildVolX.get() else 0.0
        if not self.cmb_Kinematics.get()=='Delta':
            try:
            #     result = size < vol - 20
                result = float(self.ent_PatternXsize.get()) < float(self.ent_BuildVolX.get()) - 20
            except:
                result = False
        else:
            try:
                diag = sqrt(float(self.ent_PatternXsize.get())**2 + float(self.ent_PatternYsize.get())**2)
                result =  diag < float(self.ent_BuildVolX.get()) - 25
            except:
                result = False
        self.ent_PatternXsize.configure(foreground = "#000000" if result else "#ff0000")
        return result

    def validate_pattern_Y(self):
        # size = float(self.ent_PatternYsize.get()) if self.ent_PatternYsize.get() else 0.0
        # vol = float(self.ent_BuildVolY.get()) if self.ent_BuildVolY.get() else 0.0
        if not self.cmb_Kinematics.get()=='Delta':
            try:
            #     result = size < vol - 20
                result = float(self.ent_PatternYsize.get()) < float(self.ent_BuildVolY.get()) - 20
            except:
                result = False
        else:
            result = self.validate_pattern_X()
        self.ent_PatternYsize.configure(foreground = "#000000" if result else "#ff0000")
        return result

    def validate_pattern_Z(self):
        # vol = float(self.ent_BuildVolZ.get()) if self.ent_BuildVolZ.get() else 0.0
        try:
        #     result = self.pattern_height() < vol - 10
            result = self.pattern_height() < float(self.ent_BuildVolZ.get()) - 10
        except:
            result = False
        self.lbl_PatternZsize['text'] = "x %.2f mm" % self.pattern_height()
        self.lbl_PatternZsize.configure(foreground="#000000" if result else "#ff0000")
        return result

    def handle_ABL_chk(self):
        self.cmb_AutolevelingType.configure(state = ("readonly",) if self.chk_UseAutoleveling_var.get() else ("disabled",))

    def handle_Cooling_scl(self):
        perc = self.scl_CoolingPerc_var.get()*5
        self.lbl_CoolingPerc['text'] = '%s%%' % perc

    def handle_Kinematics_cmb(self):
        if self.cmb_Kinematics.get() == 'Delta':
            self.ent_BuildVolY.configure(state = "disabled")
            self.ent_BuildVolY_var.set(self.ent_BuildVolX_var.get())
        else:
            self.ent_BuildVolY.configure(state = "!disabled")
        self.revalidate_all()

    def revalidate_all(self):
        self.validate_pattern_X()
        self.validate_pattern_Y()
        self.validate_pattern_Z()
        self.handle_ABL_chk()
        self.handle_Cooling_scl()


class TextDialog(object):
    def __init__(self, master):
        self.value = ""
        self.top = tk.Toplevel(master)
        self.top.geometry("+500+350")
        self.top.title("Create profile")
        self.lbl = tk.Label(self.top, text="Enter profile name")
        self.lbl.pack()
        self.ent = tk.Entry(self.top)
        self.ent.pack()
        self.btn = tk.Button(self.top, text='Ok', command=self.done)
        self.btn.pack()

    def done(self):
        self.value = self.ent.get()
        self.top.destroy()
